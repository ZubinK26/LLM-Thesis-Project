import spacy

# Initialize the spaCy NLP pipeline once globally.
_spacy_nlp_logical_markers = None

def _initialize_spacy_nlp_logical_markers():
    """Initializes and returns the spaCy NLP pipeline for logical marker detection."""
    global _spacy_nlp_logical_markers
    if _spacy_nlp_logical_markers is None:
        try:
            print("Initializing spaCy NLP pipeline for logical markers...")
            _spacy_nlp_logical_markers = spacy.load("en_core_web_md")
            print("spaCy NLP pipeline for logical markers initialized successfully.")
        except OSError:
            print("Error: spaCy model 'en_core_web_md' not found. Please run: python -m spacy download en_core_web_md")
            _spacy_nlp_logical_markers = None
        except Exception as e:
            print(f"An unexpected error occurred while loading spaCy for logical markers: {e}")
            _spacy_nlp_logical_markers = None
    return _spacy_nlp_logical_markers

def measure_logical_markers(text):
    """
    Identifies and counts logical markers (quantifiers, modality, conditionals)
    using predefined keyword lists and spaCy for text normalization (lowercasing, lemmatization).

    Args:
        text (str): The input text to analyze.

    Returns:
        dict: A dictionary containing the following metrics:
              - 'quantifier_count': Integer count of quantifiers.
              - 'modality_marker_count': Integer count of modality markers.
              - 'conditional_marker_count': Integer count of conditional markers.
              - 'detected_quantifiers': List of strings, e.g., "'all' (Lemma: all)".
              - 'detected_modality_markers': List of strings.
              - 'detected_conditional_markers': List of strings.
              - 'success': Boolean indicating if the operation was successful.
              - 'error_message': String with error details if any.
    """
    results = {
        'quantifier_count': 0,
        'modality_marker_count': 0,
        'conditional_marker_count': 0,
        'detected_quantifiers': [],
        'detected_modality_markers': [],
        'detected_conditional_markers': [],
        'success': False,
        'error_message': None
    }

    nlp = _initialize_spacy_nlp_logical_markers()
    if nlp is None:
        results['error_message'] = "spaCy NLP pipeline failed to initialize for logical markers."
        return results

    # --- Keyword Lists (Generated by LLM, can be expanded/modified) ---
    quantifiers = {
        "all", "every", "each", "any", "some", "most", "many", "much", "few",
        "little", "no", "none", "both", "either", "neither", "several", "numerous",
        "plenty", "abundance", "majority", "minority", "a lot of", "lots of"
    }

    modality_markers = {
        "always", "never", "must", "should", "would", "could", "might", "may",
        "can", "will", "shall", "ought", "certainly", "possibly", "probably",
        "likely", "unlikely", "necessary", "possible", "impossible", "obligatory",
        "permitted", "appears", "seems", "believes", "suggests", "indicates",
        "claims", "reportedly", "allegedly" # epistemic/evidential modality
    }

    conditionals = {
        "if", "unless", "provided", "providing", "given", "assuming", "supposing",
        "wherever", "as long as", "on condition that", "in case"
    }

    try:
        doc = nlp(text)

        # Iterate over tokens to match against keyword lists
        for token in doc:
            lemma_lower = token.lemma_.lower()
            text_lower = token.text.lower()

            # Check for quantifiers
            if lemma_lower in quantifiers or text_lower in quantifiers:
                results['quantifier_count'] += 1
                results['detected_quantifiers'].append(f"'{token.text}' (Lemma: {token.lemma_})")
            
            # Check for modality markers
            if lemma_lower in modality_markers or text_lower in modality_markers:
                results['modality_marker_count'] += 1
                results['detected_modality_markers'].append(f"'{token.text}' (Lemma: {token.lemma_})")
            
            # Check for conditionals
            if lemma_lower in conditionals or text_lower in conditionals:
                results['conditional_marker_count'] += 1
                results['detected_conditional_markers'].append(f"'{token.text}' (Lemma: {token.lemma_})")
        
        results['success'] = True

    except Exception as e:
        results['error_message'] = f"An error occurred during logical marker detection processing: {e}"
        results['success'] = False

    return results

if __name__ == "__main__":
    print("--- Running Logical Markers Dimension Test (Standalone) ---")

    # Test Case 1: Sentence with all three types of markers
    test_text_1 = "If all students study, they should pass, assuming they try their best."
    print(f"\nAnalyzing Text 1: '{test_text_1}'")
    results_1 = measure_logical_markers(test_text_1)
    if results_1['success']:
        print("\nResults for Text 1:")
        print(f"  Quantifier Count: {results_1['quantifier_count']}")
        print(f"  Detected Quantifiers: {results_1['detected_quantifiers']}")
        print(f"  Modality Marker Count: {results_1['modality_marker_count']}")
        print(f"  Detected Modality Markers: {results_1['detected_modality_markers']}")
        print(f"  Conditional Marker Count: {results_1['conditional_marker_count']}")
        print(f"  Detected Conditional Markers: {results_1['detected_conditional_markers']}")
    else:
        print(f"  Error: {results_1['error_message']}")

    print("\n" + "="*70 + "\n")

    # Test Case 2: Sentence focusing on quantifiers and modality
    test_text_2 = "Many people believe that some problems might never be solved."
    print(f"\nAnalyzing Text 2: '{test_text_2}'")
    results_2 = measure_logical_markers(test_text_2)
    if results_2['success']:
        print("\nResults for Text 2:")
        print(f"  Quantifier Count: {results_2['quantifier_count']}")
        print(f"  Detected Quantifiers: {results_2['detected_quantifiers']}")
        print(f"  Modality Marker Count: {results_2['modality_marker_count']}")
        print(f"  Detected Modality Markers: {results_2['detected_modality_markers']}")
        print(f"  Conditional Marker Count: {results_2['conditional_marker_count']}")
        print(f"  Detected Conditional Markers: {results_2['detected_conditional_markers']}")
    else:
        print(f"  Error: {results_2['error_message']}")

    print("\n" + "="*70 + "\n")

    # Test Case 3: Sentence with no obvious logical markers
    test_text_3 = "The dog barked loudly at the mailman."
    print(f"\nAnalyzing Text 3: '{test_text_3}'")
    results_3 = measure_logical_markers(test_text_3)
    if results_3['success']:
        print("\nResults for Text 3:")
        print(f"  Quantifier Count: {results_3['quantifier_count']}")
        print(f"  Detected Quantifiers: {results_3['detected_quantifiers']}")
        print(f"  Modality Marker Count: {results_3['modality_marker_count']}")
        print(f"  Detected Modality Markers: {results_3['detected_modality_markers']}")
        print(f"  Conditional Marker Count: {results_3['conditional_marker_count']}")
        print(f"  Detected Conditional Markers: {results_3['detected_conditional_markers']}")
    else:
        print(f"  Error: {results_3['error_message']}")